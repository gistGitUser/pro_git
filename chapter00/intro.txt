
Что такое «система контроля версий» и почему это важно?
Система контроля версий — это
система, записывающая изменения в файл или
набор файлов в течение времени и
позволяющая вернуться позже к определённой версии.

//можно сделать прикольную штуку на opencv типа git diff дял изображений
+ делать одинаковое разрешение для более точного сравнения

Если вы графический или web-дизайнер и хотите сохранить
каждую версию изображения
или макета (скорее всего, захотите), система контроля версий
(далее VCS) — как раз то, что
нужно. Она позволяет вернуть файлы к состоянию, в котором они
были до изменений,
вернуть проект к исходному состоянию, увидеть изменения, увидеть, кто последний менял
что-то и вызвал проблему, кто поставил задачу и когда и многое другое. Использование VCS
также значит в целом, что, если вы сломали что-то или потеряли файлы, вы спокойно
можете всё исправить. В дополнение ко всему вы получите всё это без каких-либо
дополнительных усилий.


Centralized Version Control
System, далее CVCS). Такие системы, как CVS, Subversion и Perforce,
используют единственный сервер, содержащий все версии файлов,
и некоторое количество клиентов,
которые получают файлы из этого централизованного хранилища. Применение CVCS
являлось стандартом на протяжении многих лет.


Несмотря на это, данный подход тоже имеет серьёзные минусы. Самый очевидный
минус — это единая точка отказа, представленная централизованным сервером. Если этот
сервер выйдет из строя на час, то в течение этого времени никто не сможет использовать
контроль версий для сохранения изменений, над которыми работает, а также никто не
сможет обмениваться этими изменениями с другими разработчиками. Если жёсткий диск,
на котором хранится центральная БД, повреждён, а своевременные бэкапы отсутствуют, вы
потеряете всё — всю историю проекта, не считая единичных снимков репозитория, которые
сохранились на локальных машинах разработчиков. Локальные VCS страдают от той же
самой проблемы: когда вся история проекта хранится в одном месте, вы рискуете потерять
всё.


Здесь в игру вступают распределённые системы контроля версий (Distributed Version Control
System, далее DVCS). В DVCS (таких как Git, Mercurial, Bazaar или Darcs) клиенты не просто
скачивают снимок всех файлов (состояние файлов на определённый момент
времени) — они полностью копируют репозиторий. В этом случае, если один из серверов,
через который разработчики обменивались данными, умрёт, любой клиентский
репозиторий может быть скопирован на другой сервер для продолжения работы. Каждая
копия репозитория является полным бэкапом всех данных.

подход Git к
хранению данных больше похож на набор снимков миниатюрной файловой системы.
Каждый раз, когда вы делаете коммит, то есть сохраняете состояние своего проекта в Git,
система запоминает, как выглядит каждый файл в этот момент, и сохраняет ссылку на этот
снимок. Для увеличения эффективности, если файлы не были изменены, Git не запоминает
эти файлы вновь, а только создаёт ссылку на предыдущую версию идентичного файла,
который уже сохранён. Git представляет свои данные как, скажем, поток снимков.

У Git есть три основных
состояния, в которых могут находиться ваши файлы:
изменён (modified),
индексирован (staged)
зафиксирован (committed):

• К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы.
• Индексированный — это изменённый файл в его текущей версии, отмеченный для
включения в следующий коммит.
• Зафиксированный значит, что файл уже сохранён в вашей локальной базе.


























